diff --git a/grbl laser copy.cps b/grbl laser.cps
similarity index 79%
rename from grbl laser copy.cps
rename to grbl laser.cps
index 4950713..0c2220b 100644
--- a/grbl laser copy.cps	
+++ b/grbl laser.cps	
@@ -75,12 +75,20 @@ properties = {
     value      : true,
     scope      : "post"
   },
+  maxPowerLevel: {
+    title      : "Max power level",
+    description: "Max laser power used to scale power levels (corresponds to spindle RPM/$30).",
+    group      : "preferences",
+    type       : "integer",
+    value      : 1000,
+    scope      : "post"
+  },
   throughPower: {
     title      : "Through power",
     description: "Sets the laser power used for through cutting.",
     group      : "preferences",
     type       : "number",
-    value      : 255,
+    value      : 1,
     scope      : "post"
   },
   etchPower: {
@@ -88,7 +96,7 @@ properties = {
     description: "Sets the laser power used for etching.",
     group      : "preferences",
     type       : "number",
-    value      : 50,
+    value      : 0.25,
     scope      : "post"
   },
   vaporizePower: {
@@ -96,7 +104,23 @@ properties = {
     description: "Sets the laser power used for vaporize cutting.",
     group      : "preferences",
     type       : "number",
-    value      : 255,
+    value      : 1,
+    scope      : "post"
+  },
+  throughPassCount: {
+    title      : "Through pass count",
+    description: "Pass count for through cutting operations.",
+    group      : "preferences",
+    type       : "integer",
+    value      : 1,
+    scope      : "post"
+  },
+  writeThroughPassCountComment: {
+    title      : "Write through pass count comment",
+    description: "Sets whether to write comments for through pass section duplications.",
+    group      : "preferences",
+    type       : "boolean",
+    value      : 1,
     scope      : "post"
   }
 };
@@ -140,10 +164,17 @@ var WARNING_WORK_OFFSET = 0;
 var sequenceNumber;
 var currentWorkOffset;
 
+var isWritingSection = false;
+var currentSectionBuffer = [];
+
 /**
   Writes the specified block.
 */
 function writeBlock() {
+  if (isWritingSection) {
+    currentSectionBuffer.push(arguments);
+  }
+
   if (getProperty("showSequenceNumbers")) {
     writeWords2("N" + sequenceNumber, arguments);
     sequenceNumber += getProperty("sequenceNumberIncrement");
@@ -258,6 +289,7 @@ function forceAny() {
 }
 
 function onSection() {
+  isWritingSection = true;
 
   writeln("");
 
@@ -276,22 +308,6 @@ function onSection() {
       error(localize("The CNC does not support the required tool/process. Only laser cutting is supported."));
       return;
     }
-
-    var power = 0;
-    switch (currentSection.jetMode) {
-    case JET_MODE_THROUGH:
-      power = getProperty("throughPower");
-      break;
-    case JET_MODE_ETCHING:
-      power = getProperty("etchPower");
-      break;
-    case JET_MODE_VAPORIZE:
-      power = getProperty("vaporizePower");
-      break;
-    default:
-      error(localize("Unsupported cutting mode."));
-      return;
-    }
   } else {
     error(localize("The CNC does not support the required tool/process. Only laser cutting is supported."));
     return;
@@ -312,7 +328,9 @@ function onSection() {
     setRotation(remaining);
   }
 
-  writeBlock(gMotionModal.format(0), sOutput.format(power), mFormat.format(getPowerMode(currentSection)));
+  // Only write G0 instruction, let #onPower call #writeBlock for spindle ON/OFF commands
+  //writeBlock(gMotionModal.format(0), sOutput.format(power), mFormat.format(getPowerMode(currentSection)));
+  writeBlock(gMotionModal.format(0));
 
   var initialPosition = getFramePosition(currentSection.getInitialPosition());
   writeBlock(gMotionModal.format(0), xOutput.format(initialPosition.x), yOutput.format(initialPosition.y));
@@ -332,7 +350,44 @@ function onRadiusCompensation() {
   pendingRadiusCompensation = radiusCompensation;
 }
 
+var lastPower = false;
+
 function onPower(power) {
+  if (power === lastPower) {
+    return;
+  }
+  lastPower = power;
+
+  if (power) {
+    // Duplicated from original code within #onSection
+    // Moved into function for use in #onPower and removed from #onSection
+    var powerLevel;
+
+    switch (currentSection.jetMode) {
+    case JET_MODE_THROUGH:
+      powerLevel = getProperty("throughPower");
+      break;
+    case JET_MODE_ETCHING:
+      powerLevel = getProperty("etchPower");
+      break;
+    case JET_MODE_VAPORIZE:
+      powerLevel = getProperty("vaporizePower");
+      break;
+    default:
+      error(localize("Unsupported cutting mode."));
+      return;
+    }
+
+    // Scale powerLevel against maxPowerLevel
+    // Round to avoid decimals and clamp to prevent over/under values
+    powerLevel = clamp(0, Math.round(powerLevel * getProperty("maxPowerLevel")), getProperty("maxPowerLevel"));
+
+    var powerMode = getPowerMode(currentSection);
+
+    writeBlock(sOutput.format(powerLevel), mFormat.format(powerMode));
+  } else {
+    writeBlock(sOutput.format(0));
+  }
 }
 
 function onRapid(_x, _y, _z) {
@@ -470,6 +525,27 @@ function onCommand(command) {
 
 function onSectionEnd() {
   forceAny();
+
+  if (isWritingSection) {
+    isWritingSection = false;
+
+    // Repush the currentSectionBuffer into #writeBlock
+    if (currentSectionBuffer.length > 0) {
+      for (var pass = 0; pass < getProperty("throughPassCount") - 1; pass++) {
+        writeln("");
+
+        if (getProperty("writeThroughPassCountComment")) {
+          writeComment("throughPass Copy " + (pass + 1));
+        }
+
+        for (var block = 0; block < currentSectionBuffer.length; block++) {
+          writeBlock(currentSectionBuffer[block]);
+        }
+      }
+
+      currentSectionBuffer = [];
+    }
+  }
 }
 
 function onClose() {
